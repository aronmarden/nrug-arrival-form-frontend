{"version":3,"file":"static/js/session-manager.fcdbe5ce.chunk.js","mappings":"wRAAaA,EAAY,oBAAAA,KAAAC,EAAAA,EAAAA,GAAA,KAAAD,EAAA,CAyBtB,OAzBsBE,EAAAA,EAAAA,GAAAF,EAAA,EAAAG,IAAA,MAAAC,MACvB,SAAID,GACF,IAGE,OAAOE,aAAaC,QAAQH,SAAQI,CACtC,CAAE,MAAOC,GAEP,MAAO,EACT,CACF,GAAC,CAAAL,IAAA,MAAAC,MACD,SAAID,EAAKC,GACP,IACE,YAAcG,IAAVH,GAAiC,OAAVA,EAAuBK,KAAKC,OAAOP,GACvDE,aAAaM,QAAQR,EAAKC,EACnC,CAAE,MAAOI,GACP,CAEJ,GAAC,CAAAL,IAAA,SAAAC,MACD,SAAOD,GACL,IACEE,aAAaO,WAAWT,EAC1B,CAAE,MAAOK,GACP,CAEJ,KAACR,CAAA,CAzBsB,GCAZa,EAAiB,WAC5B,SAAAA,EAAYC,IAAQb,EAAAA,EAAAA,GAAA,KAAAY,GAClBJ,KAAKK,OAASA,CAChB,CAwBC,OAxBAZ,EAAAA,EAAAA,GAAAW,EAAA,EAAAV,IAAA,MAAAC,MACD,SAAIW,GACF,IACE,IAAIC,EAAQC,SAASC,OAAOF,MAAM,IAAIG,OAAO,QAAUJ,EAAO,aAC9D,GAAIC,EAAO,OAAOA,EAAM,EAC1B,CAAE,MAAOR,GAEP,MAAO,EACT,CACF,GAAC,CAAAL,IAAA,MAAAC,MACD,SAAID,EAAKC,GACP,IACE,IAAMc,EAAS,GAAGE,OAAOjB,EAAK,KAAKiB,OAAOhB,EAAO,aAAagB,OAAOX,KAAKK,OAAQ,YAClFG,SAASC,OAASA,CACpB,CAAE,MAAOV,GACP,CAEJ,GAAC,CAAAL,IAAA,SAAAC,MACD,SAAOD,GACL,IACEc,SAASC,OAAS,GAAGE,OAAOjB,EAAK,qDAAqDiB,OAAOX,KAAKK,OAAQ,WAC5G,CAAE,MAAON,GACP,CAEJ,KAACK,CAAA,CA3B2B,GCO1BQ,EAAU,EACP,SAASC,EAAkBC,GAChC,IAAMC,GAAeC,EAAAA,EAAAA,IAAWF,GAChC,GAAIF,IAAW,OAAOG,EAAaE,QACnC,IAAMC,GAAcC,EAAAA,EAAAA,IAAiBL,GAAiBG,QAGhDG,EAA6B,OAAXF,QAAW,IAAXA,GAAAA,EAAab,OAAS,IAAID,EAAkBc,EAAYb,QAAU,IAAId,EAC9FwB,EAAaE,QAAU,IAAII,EAAAA,GAAc,CACvCP,gBAAAA,EACApB,IAAK,UACL4B,QAASF,EACTG,UAAsB,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaK,UACxBC,WAAuB,OAAXN,QAAW,IAAXA,OAAW,EAAXA,EAAaM,aAI3B,IAAMC,EAAoBV,EAAaE,QAAQS,MAAMC,OAC/CC,GAAYC,EAAAA,EAAAA,IAAQf,GACtBW,IACFG,EAAUE,cAAYC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjBH,EAAUE,cACVL,IAGP,IAAMO,EAAWC,EAAAA,GAAGC,IAAIpB,GAgBxB,OAXAqB,EAAAA,EAAAA,GAAgB,0BAA0B,SAACC,EAAM1C,EAAKC,GACpDoB,EAAaE,QAAQoB,oBAAoB3C,EAAKC,EAChD,GAAG,UAAWqC,IAKdG,EAAAA,EAAAA,GAAgB,iBAAiB,SAACC,EAAM1C,EAAKC,GAC3CoB,EAAaE,QAAQoB,oBAAoB3C,EAAKC,EAChD,GAAG,UAAWqC,IACdM,EAAAA,EAAAA,GAAMxB,EAAiB,WAChBC,EAAaE,OACtB,C","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/storage/local-storage.js","../node_modules/@newrelic/browser-agent/dist/esm/common/storage/first-party-cookies.js","../node_modules/@newrelic/browser-agent/dist/esm/features/utils/agent-session.js"],"sourcesContent":["export class LocalStorage {\n  get(key) {\n    try {\n      // localStorage strangely type-casts non-existing data to \"null\"...\n      // Cast it back to undefined if it doesnt exist\n      return localStorage.getItem(key) || undefined;\n    } catch (err) {\n      // Error is ignored\n      return '';\n    }\n  }\n  set(key, value) {\n    try {\n      if (value === undefined || value === null) return this.remove(key);\n      return localStorage.setItem(key, value);\n    } catch (err) {\n      // Error is ignored\n    }\n  }\n  remove(key) {\n    try {\n      localStorage.removeItem(key);\n    } catch (err) {\n      // Error is ignored\n    }\n  }\n}","export class FirstPartyCookies {\n  constructor(domain) {\n    this.domain = domain;\n  }\n  get(name) {\n    try {\n      var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\n      if (match) return match[2];\n    } catch (err) {\n      // Error is ignored\n      return '';\n    }\n  }\n  set(key, value) {\n    try {\n      const cookie = \"\".concat(key, \"=\").concat(value, \"; Domain=\").concat(this.domain, \"; Path=/\");\n      document.cookie = cookie;\n    } catch (err) {\n      // Error is ignored\n    }\n  }\n  remove(key) {\n    try {\n      document.cookie = \"\".concat(key, \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; Domain=\").concat(this.domain, \"; Path=/\");\n    } catch (err) {\n      // Error is ignored\n    }\n  }\n}","import { getConfiguration, getInfo, getRuntime } from '../../common/config/config';\nimport { drain } from '../../common/drain/drain';\nimport { ee } from '../../common/event-emitter/contextual-ee';\nimport { registerHandler } from '../../common/event-emitter/register-handler';\nimport { SessionEntity } from '../../common/session/session-entity';\nimport { LocalStorage } from '../../common/storage/local-storage.js';\nimport { FirstPartyCookies } from '../../common/storage/first-party-cookies';\nlet ranOnce = 0;\nexport function setupAgentSession(agentIdentifier) {\n  const agentRuntime = getRuntime(agentIdentifier);\n  if (ranOnce++) return agentRuntime.session;\n  const sessionInit = getConfiguration(agentIdentifier).session;\n  /* Domain is a string that can be specified by customer. The only way to keep the session object across subdomains is using first party cookies.\n    This determines which storage wrapper the session manager will use to keep state. */\n  const storageTypeInst = sessionInit?.domain ? new FirstPartyCookies(sessionInit.domain) : new LocalStorage();\n  agentRuntime.session = new SessionEntity({\n    agentIdentifier,\n    key: 'SESSION',\n    storage: storageTypeInst,\n    expiresMs: sessionInit?.expiresMs,\n    inactiveMs: sessionInit?.inactiveMs\n  });\n\n  // Retrieve & re-add all of the persisted setCustomAttribute|setUserId k-v from previous page load(s), if any was stored.\n  const customSessionData = agentRuntime.session.state.custom;\n  const agentInfo = getInfo(agentIdentifier);\n  if (customSessionData) {\n    agentInfo.jsAttributes = {\n      ...agentInfo.jsAttributes,\n      ...customSessionData\n    };\n  }\n  const sharedEE = ee.get(agentIdentifier);\n\n  // any calls to newrelic.setCustomAttribute(<persisted>) will need to be added to:\n  // local info.jsAttributes {}\n  // the session's storage API\n  registerHandler('api-setCustomAttribute', (time, key, value) => {\n    agentRuntime.session.syncCustomAttribute(key, value);\n  }, 'session', sharedEE);\n\n  // any calls to newrelic.setUserId(...) will need to be added to:\n  // local info.jsAttributes {}\n  // the session's storage API\n  registerHandler('api-setUserId', (time, key, value) => {\n    agentRuntime.session.syncCustomAttribute(key, value);\n  }, 'session', sharedEE);\n  drain(agentIdentifier, 'session');\n  return agentRuntime.session;\n}"],"names":["LocalStorage","_classCallCheck","_createClass","key","value","localStorage","getItem","undefined","err","this","remove","setItem","removeItem","FirstPartyCookies","domain","name","match","document","cookie","RegExp","concat","ranOnce","setupAgentSession","agentIdentifier","agentRuntime","getRuntime","session","sessionInit","getConfiguration","storageTypeInst","SessionEntity","storage","expiresMs","inactiveMs","customSessionData","state","custom","agentInfo","getInfo","jsAttributes","_objectSpread","sharedEE","ee","get","registerHandler","time","syncCustomAttribute","drain"],"sourceRoot":""}